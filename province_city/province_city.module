<?php
/**
 * @file
 * @author ryanlau<showqonline#gmail.com>
 */
define('HIERARCHICAL_DEPTH_1', '1');
define('HIERARCHICAL_DEPTH_2', '2');
define('HIERARCHICAL_DEPTH_3', '3');
 
define('DISPLAY_LABEL_1', '1');
define('DISPLAY_LABEL_2', '2');

function _province_city_load_province()
{
  $result = db_query("SELECT * FROM {province_city_provinces}");
  $province_options = array();
  $province_options[0] = '请选择';
  while ( $province = db_fetch_object( $result ) ) {
    $province_options[$province->provinceid] = $province->province;
  }
  return $province_options;
}

function _province_city_load_city($pid)
{
  $result = db_query("SELECT * FROM {province_city_cities} WHERE provinceid = %d", $pid);
  $city_options = array();
  $city_options[0] = '请选择';
  while ( $city = db_fetch_object($result) ) {
    $city_options[$city->cityid] = $city->city;
  }
  return $city_options;
}

function _province_city_load_area($cid)
{
  $result = db_query("SELECT * FROM {province_city_areas} WHERE cityid = %d", $cid);
  $area_options = array();
  $area_options[0] = '请选择';
  while( $area = db_fetch_object( $result ) )
  {
    $area_options[$area->areaid] = $area->area;
  }
  return $area_options;
} 

function _province_city_process(&$item, $delta = 0, $field, $node) {
  // Trim whitespace from URL.
}

/**
 * Implementation of hook_field_info().
 */
function province_city_field_info() {
  return array(
    'province_city' => array(
      'label' => t('省市级联'),
      'description' => t('存储省市信息到数据库中.'),
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function province_city_field_settings($op, $field) {
  switch ($op) {
    case 'form':
      $form = array(
        '#theme' => 'province_city_field_settings',
      );
      
      $options = array(
        HIERARCHICAL_DEPTH_1 => '省',
        HIERARCHICAL_DEPTH_2 => '省市',
        HIERARCHICAL_DEPTH_3 => '省市区',
      );
      
      $form['hierarchical_depth'] = array(
        '#type' => 'radios', 
        '#title' => t('层级深度'), 
        '#options' => $options,
        '#default_value' => $field['hierarchical_depth'],
      );
      
      $options = array(
        DISPLAY_LABEL_1 => '不显示',
        DISPLAY_LABEL_2 => '显示',
      );
      
      $form['display_label'] = array(
        '#type' => 'radios',
        '#title' => t('显示标签'),
        '#options' => $options,
        '#default_value' => !empty($field['display_label']) ? $field['display_label'] : 1,
      );
      return $form;

    case 'validate':
      if ( empty($field['hierarchical_depth']) ) {
        form_set_error('hierarchical_depth', t('请选择层级深度'));
      }
      break;

    case 'save':
      return array('hierarchical_depth', 'display_label');

    case 'database columns':
      return array(
        'pid' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        'cid' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        'aid' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
      );

    // case 'views data':
      // return array();
  }
}

/**
 * Theme the settings form for the link field.
 */
function theme_province_city_field_settings($form) {
  $title_value = drupal_render($form['title_value']);
  $title_checkbox = drupal_render($form['title']['value']);

  // Set Static Title radio option to include the title_value textfield.
  $form['title']['value'] = array('#value' => '<div class="container-inline">'. $title_checkbox . $title_value .'</div>');

  // Reprint the title radio options with the included textfield.
  return drupal_render($form);
}

/**
 * Implementation of hook_field().
 */
function province_city_field($op, &$node, $field, &$items, $teaser, $page) {
}

/**
 * Implementation of hook_widget_info().
 */
function province_city_widget_info() {
  return array(
    'province_city' => array(
      'label' => '层级下拉菜单',
      'field types' => array('province_city'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_widget().
 */
function province_city_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => isset($items[$delta]) ? $items[$delta] : '',
    '#title' => $field['widget']['label'],
    '#weight' => $field['widget']['weight'],
    '#description' => $field['widget']['description'],
    '#required' => $field['required'],
    '#field' => $field,
  );
  return $element;
}

/**
 * Implementation of hook_elements().
 */
function province_city_elements() {
  $elements = array();
  $elements['province_city'] =  array(
    '#input' => TRUE,
    '#process' => array('province_city_process'),
  );
  return $elements;
}

/**
 * Process the link type element before displaying the field.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 * The $fields array is in $form['#field_info'][$element['#field_name']].
 */
function province_city_process($element, $edit, $form_state, $form) {
   $field = $form['#field_info'][$element['#field_name']];
   $delta = $element['#delta'];
   $hierarchical_depth = $element['#field']['hierarchical_depth'];
   $display_label = $element['#field']['display_label'];
   
   $element['#cache'] = TRUE;
   
   if( $hierarchical_depth >= HIERARCHICAL_DEPTH_1 )
   {
     $options = _province_city_load_province();
     $element['pid'] = array(
       '#type' => 'select',
       '#title' => ($display_label == 2 ? '省' : NULL),
       '#options' => $options,
       '#default_value' => isset($element['#value']['pid']) ? $element['#value']['pid'] : 0,
     );
   }
   
   if( $hierarchical_depth >= HIERARCHICAL_DEPTH_2 )
   {
     $options = array();
     $options[0] = '请选择';
     $pid = $element['#value']['pid'];
     if( !empty($pid) )
     {
       $options += _province_city_load_city($pid);
     }
     $element['cid'] = array(
       '#type' => 'select',
       '#title' => ($display_label == 2 ? '市' : NULL),
      '#options' => $options,
       '#default_value' => isset($element['#value']['cid']) ? $element['#value']['cid'] : NULL,
     );
   }
   
  if( $hierarchical_depth >= HIERARCHICAL_DEPTH_3 )
   {
     $options = array();
     $options[0] = '请选择';
     $cid = $element['#value']['cid'];
     if( !empty($cid) )
     {
       $options += _province_city_load_area($cid);
     }
     $element['aid'] = array(
        '#type' => 'select',
       '#title' => ($display_label == 2 ? '区' : NULL),
        '#options' => $options,
        '#default_value' => isset($element['#value']['aid']) ? $element['#value']['aid'] : 0,
      );
   }
   return $element;
}

/**
 * Implementation of hook_field_formatter_info().
 */
function province_city_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Default'),
      'field types' => array('province_city'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

function province_city_content_is_empty($item, $field)
{
  $depth = $field['hierarchical_depth'];
  switch( $depth )
  {
    case 1:
      return empty($item['pid']);
    case 2:
      return empty($item['pid']) || empty($item['cid']);
    case 3:
      return empty($item['pid']) || empty($item['cid']) || empty($item['aid']);
  }
  return FALSE;
}

/**
 * Implementation of hook_theme().
 */
function province_city_theme() {
  return array(
    'province_city_field_settings' => array(
      'arguments' => array('element' => NULL),
    ),
    'province_city_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'province_city' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/*
 * Implementation of hook_menu().
 * Define menu items and page callbacks. 
 */
function province_city_menu() 
{
  $items = array();
  $items['province_city/js/%/%'] = array(
    'page callback'=> 'province_city_json',
    'page arguments' => array(2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function province_city_json($type, $id)
{
  include_once 'modules/node/node.pages.inc';
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  // Get the form from the cache.
  $form = form_get_cache($form_build_id, $form_state);
  $args = $form['#parameters'];
  $form_id = array_shift($args);
  // We will run some of the submit handlers so we need to disable redirecting.
  // $form['#redirect'] = FALSE;
  // We need to process the form, prepare for that by setting a few internals
  // variables.
  
  //$form['#post'] = $_POST;
  $form['#programmed'] = FALSE;
  $form_state['post'] = $_POST;
  // Build, validate and if possible, submit the form.
  drupal_process_form($form_id, $form, $form_state);
  
  $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
  
  switch( $type )
  {
    case 'city':
      $options =  _province_city_load_city($id);
      break;
    case 'area':
      $options =  _province_city_load_area($id);
      break;
  }
  if( count($options) > 0 )
  {
    drupal_json($options);
  }
  exit;
}

/**
 * FAPI theme for an individual text elements.
 */
function theme_province_city($element) {
  drupal_add_js('misc/jquery.form.js');
  $hierarchical_depth = $element['#field']['hierarchical_depth'];
  
  $js = array(); $delta = array();
  $delta['province_city_depth'] = $hierarchical_depth;
  if( isset( $element['pid'] ) )
  {
    $delta['province_id'] = $element['pid']['#id'];
  }
  if( isset( $element['cid'] ) )
  {
    $delta['city_id'] = $element['cid']['#id'];
  }
  if( isset( $element['aid'] ) )
  {
    $delta['area_id'] = $element['aid']['#id'];
  }
  $js['province_city'][$element['#id']] = $delta;
  drupal_add_js($js, 'setting');

  drupal_add_js(drupal_get_path('module', 'province_city') .'/province_city.js');
  
  //drupal_add_css(drupal_get_path('module', 'link') .'/province_city.css');
  // Prefix single value link fields with the name of the field.
  $element['#attributes']['id'] = $element['#id'];
  $class = 'province-city-wrapper province-city-hierarchical form-item';
  if( isset($element['#title']) )
  {
    $class .= ' form-item-labeled';
  }
  $element['#attributes']['class'] = $class;
  $output = '<div '. drupal_attributes($element['#attributes']) .'>'. ($element['#title'] ? '<label>'. $element['#title'] .'</label>' : '') . (isset($element['#description']) && $element['#description'] ? '<div class="description">'. $element['#description'] .'</div>' : '') ;
  if( isset($element['pid']))
  {
    $output .= '<div class="province-city-field-pid province-city-field-column">'. theme('select', $element['pid']) .'</div>';
  }
  if( isset($element['cid']))
  {
    $output .= '<div class="province-city-field-cid province-city-field-column">'. theme('select', $element['cid']) .'</div>';
  }
  if( isset($element['aid']))
  {
    $output .= '<div class="province-city-field-aid province-city-field-column">'. theme('select', $element['aid']) .'</div>';
  }
  $output .= "</div>\n";
  return $output;
}

function theme_province_city_formatter_default($element)
{
  $item = $element['#item'];
  switch( TRUE )
  {
    case !empty($item['pid']) && !empty($item['cid']) && !empty($item['aid']);
      $sql = "SELECT p.province, c.city, a.area
                  FROM {province_city_areas} a
                  LEFT JOIN {province_city_cities} c ON a.cityid = c.cityid
                  LEFT JOIN {province_city_provinces} p ON p.provinceid = c.provinceid 
                  WHERE a.areaid = '%s'";
      $result = db_fetch_object(db_query($sql, $item['aid']));
      $output = $result->province.' - '. $result->city.' - '. $result->area;
      break;
    case !empty($item['pid']) && !empty($item['cid']);
      $sql = "SELECT p.province, c.city 
                  FROM {province_city_cities} c 
                  LEFT JOIN {province_city_provinces} p ON p.provinceid = c.provinceid 
                  WHERE c.cityid = '%s'";
      $result = db_fetch_object(db_query($sql, $item['cid']));
      $output = $result->province.' - '. $result->city;
      break;
    case !empty($item['pid']):
      $result = db_fetch_object(db_query("SELECT province FROM {province_city_provinces} WHERE provinceid = '%s'", $item['pid']));
      $output = $result->province;
      break;
    default:
      $output = '-';
      break;
  }
  return $output;
}
